#!/usr/bin/env python
import os
import sys
import socket
import time
import platform

import libsinan.args
from libsinan import sinexceptions

CONNECTION_REFUSED = 111
MAC_CONNECTION_REFUSED = 61

if platform.system() == 'Darwin':
    CONNECTION_REFUSED = MAC_CONNECTION_REFUSED



def start_server(largs):
    """ Start the server. Use the 'server_command' client
    opt if it exists, otherwise just use 'sinserv' on the path """
    cmd = "sinserv"
    prefix = ""
    try:
        cmd = largs['client_opts']['server_command']
    except KeyError:
        pass
    try:
        prefix = largs['client_opts']['prefix']
        prefix += "/bin/"
    except KeyError:
        pass
    if os.system(prefix + cmd) != 0:
        raise sinexceptions.SinanError("Unable to start " + cmd)

def try_reconnect(largs, handler, retry_count=10, retry_interval=1):
    count = 0
    while 1:
        try:
            return handler.handle(largs)
        except (socket.error), e:
            code, reason = e
            if code == CONNECTION_REFUSED:
                if count == 0:
                    print ("Server doesn't seem to be started. I am " +
                    "starting it now. ")
                    start_server(largs)
                if count < retry_count:
                    print ("Unable to connect after " + str(count *
                                                            retry_interval) +
                           " seconds. Waiting " + str(retry_interval) +
                           " second(s)")
                    count += 1
                    time.sleep(retry_interval)
                    continue
                else:
                    print ("Unable to connect to server after "
                    + str(retry_count) +
                    " tries. It seems that the server is probably hung.")
                    break
            else:
                print "Unable to build got : "
                print e
                break


def initiate_task(largs):
    """ Trys to open a connection. If the connection fails
    due to a connection refused we probably just need to start
    sinan. Look for a sinserve either in a passed in path
    or in the default path"""
    task = largs['task']
    handler = libsinan.get_handler_for_task(task)
    return try_reconnect(largs, handler)


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    largs = libsinan.args.parse(argv, "build",
                                {'url' : 'localhost:8599'})

    try:
        return initiate_task(largs)
    except sinexceptions.SinanError, e:
        print e.value
    except KeyboardInterrupt:
        print "\n\nexiting at user request. Thanks!"


if __name__ == "__main__":
    sys.exit(main())
