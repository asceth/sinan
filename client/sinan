#!/usr/bin/env python
import os
import sys
import urllib2
import libsinan.args
import libsinan.sinexceptions

CONNECTION_REFUSED = 111

def _mkdir(newdir):
    """works the way a good mkdir should :)
        - already exists, silently complete
        - regular file in the way, raise an exception
        - parent directory(ies) does not exist, make them as well
    """
    if os.path.isdir(newdir):
        pass
    elif os.path.isfile(newdir):
        raise OSError("a file with the same name as the desired " \
                      "dir, '%s', already exists." % newdir)
    else:
        head, tail = os.path.split(newdir)
        if head and not os.path.isdir(head):
            _mkdir(head)
        if tail:
            os.mkdir(newdir)


def start_server(largs):
    """ Start the server. Use the 'server_command' local
    opt if it exists, otherwise just use 'sinserv' on the path """
    log_dir = os.getenv("HOME") + "/.sinan/logs"
    _mkdir(log_dir)
    cmd = "sinserv > " + log_dir + "/out.log"
    try:
        cmd = largs['special_opts']['server_command']
    except KeyError:
        pass
    if os.system(cmd) != 0:
        raise libsinan.sinexceptions.SinanError("Unable to start " + cmd)



def initiate_task(largs):
    """ Trys to open a connection. If the connection fails
    due to a connection refused we probably just need to start
    sinan. Look for a sinserve either in a passed in path
    or in the default path"""
    try:
        task = largs['task']
        handler = libsinan.get_handler_for_task(task)
        handler.handle(largs)
    except urllib2.URLError, e:
        try:
            code, reason = e.reason
            if code == CONNECTION_REFUSED:
                start_server(largs)
                do_request(largs)
        except AttributeError:
            pass

        print "Unable to build got : "
        print e


def print_help():
    print """ sinan [args] [task]
local args (+) and server args. local args may be any of the following
    +url  :  The url to connect to and control
    +help :  This help message

Server args are much more complex. There are always sane defaults so
you shouldn't need them, but you may. To get information about server
args read the sinan documentation.
"""

def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    largs = libsinan.args.parse(argv, "build",
                                {'url' : 'localhost:8599'})
    try:
        if largs['special_opts']['help']:
            print_help()
            return 2
    except KeyError:
        pass
    try:
        initiate_task(largs)
    except libsinan.sinexceptions.SinanError, e:
        print e.value
    except KeyboardInterrupt:
        print "\n\nexiting at user request. Thanks!"


if __name__ == "__main__":
    sys.exit(main())

