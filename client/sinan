#!/usr/bin/env python
import os
import sys
import httplib
import libsinan.args
import libsinan.sinexceptions
import socket
import time

CONNECTION_REFUSED = 111

def start_server(largs):
    """ Start the server. Use the 'server_command' client
    opt if it exists, otherwise just use 'sinserv' on the path """
    cmd = "sinserv"
    prefix = ""
    try:
        cmd = largs['client_opts']['server_command']
    except KeyError:
        pass
    try:
        prefix = largs['client_opts']['prefix']
        prefix += "/bin/"
    except KeyError:
        pass
    if os.system(prefix + cmd) != 0:
        raise libsinan.sinexceptions.SinanError("Unable to start " + cmd)

def try_reconnect(largs, handler, retry_count=10, retry_interval=1):
    count = 0
    while 1:
        try:
            return handler.handle(largs)
        except (socket.error), e:
            code, reason = e
            if code == CONNECTION_REFUSED:
                if count == 0:
                    print ("Server doesn't seem to be started. I am " +
                    "starting it now. ")
                    start_server(largs)
                if count < retry_count:
                    print ("Unable to connect after " + str(count *
                                                            retry_interval) +
                           " seconds. Waiting " + str(retry_interval) +
                           " second(s)")
                    count += 1
                    time.sleep(retry_interval)
                    continue
                else:
                    print ("Unable to connect to server after "
                    + str(retry_count) +
                    " tries. It seems that the server is probably hung.")
                    break
            else:
                print "Unable to build got : "
                print e
                break


def initiate_task(largs):
    """ Trys to open a connection. If the connection fails
    due to a connection refused we probably just need to start
    sinan. Look for a sinserve either in a passed in path
    or in the default path"""
    task = largs['task']
    handler = libsinan.get_handler_for_task(task)
    return try_reconnect(largs, handler)



def print_help():
    print """ sinan [args] [task]
local args (+) and server args. local args may be any of the following
    +url  :  The url to connect to and control
    +help :  This help message

Server args are much more complex. There are always sane defaults so
you shouldn't need them, but you may. To get information about server
args read the sinan documentation.
"""

def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    largs = libsinan.args.parse(argv, "build",
                                {'url' : 'localhost:8599'})
    try:
        if largs['client_opts']['help']:
            print_help()
            return 2
    except KeyError:
        pass
    try:
        return initiate_task(largs)
    except libsinan.sinexceptions.SinanError, e:
        print e.value
    except KeyboardInterrupt:
        print "\n\nexiting at user request. Thanks!"


if __name__ == "__main__":
    sys.exit(main())

