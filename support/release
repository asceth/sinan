#!/usr/bin/env escript
%% -*- erlang -*-

main([TargetDir | EbinDirs]) ->
  %% Initialize code path to only those ebin directories provided
  code:set_path(EbinDirs),
  %% Get sinan version
  application:load(sinan),
  {ok, SinanVsn} = application:get_key(sinan, vsn),

  %% Construct list of apps sinan is dependent on
  Deps = [asn1, kernel, stdlib, compiler, dialyzer, edoc, gs, hipe, mnesia, parsetools, sasl, syntax_tools, tools, xmerl, crary, gtime, ibrowse, ewrepo, ewlib, etask, eunit, ktuo, sgte, uri, sinan, sinan_web_api],

  %% Construct release tuple
  R = {release, {"sinan", SinanVsn}, {erts, erlang:system_info(version)},
       [vsn_tuple(D) || D <- Deps]},

  %% Make the release_package directory and drop the .rel file into it
  PkgDir = filename:join([TargetDir, "release_packages", "sinan-" ++ SinanVsn]),
  Rel = filename:join([PkgDir, "release", "sinan.rel"]),

  ok = filelib:ensure_dir(Rel),

  ok = file:write_file(Rel, list_to_binary(io_lib:format("~p.\n", [R]))),

  %% Generate boot script for the release
  case systools:make_script(filename:rootname(Rel), [no_module_tests]) of
    ok ->
      ok;
    Error ->
      io:format("Error generating boot script for ~s:\n~p\n", [Rel, Error]),
      halt(1)
  end.


vsn_tuple(App) ->
  application:load(App),
  {ok, Vsn} = application:get_key(App, vsn),
  {App, Vsn}.


